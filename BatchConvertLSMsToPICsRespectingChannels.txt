// This macro batch processes all the lsm files in a folder
// saving them as pic files.
// Limitations/Specifics
// 1) Only works with Fiji
// 2) Channel order will be : red, green, blue (where present)
//    this is identified from lsm xml metadata 
// 3) Always flips vertically 
// 4) Expects names to be in regular JLab format
//    or in something where all it has to do is append the
//    v01.pic v02.pic etc to the filestem
// 5) Cannot yet run headless because it uses LOCI to open LSMs
// 6) Can't yet figure out what kind of image this is
//    which might help decide whether to flip/rotate etc

// Can be passed 2 comma separated arguments on the command line
// inputPath, outputDir or inputDir, outputDir. In the later case
// it will iterate on all the files from the inputDir

// Adapted by Aaron Ostrovsky, Sebastian Cachero and
// Greg Jefferis from code at
// http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt

requires("1.42k"); 
file = getArgument;
dir=""
outputDir=""
nc82channel=2 // => 2nd channel in increasing wavelength order (normally 561 excitation line)
outputformat="pic" // or nrrd
// if xml is missing assumes input channels are in wavelength order
AssumeChannelsInWavelengthOrder=0

// 1) Check what arguments we've received 
// --------------------------------------
//print("file = "+file);
if (file!=""){
	arg = split(file,",");
	if (arg.length<2 || arg.length>4) {
		exit();
	}
	// Specify the nc82 channel using 3rd arg
	if (arg.length>=3){
		nc82channel=parseInt(arg[2]);
		if(isNaN(nc82channel) || nc82channel<1 || nc82channel>3){
			exit("nc82 channel must be between 1 and 3");
		}
	}
	if (arg.length==4){
		outputformat=arg[3];
		if( ! (outputformat == "pic" || outputformat == "nrrd")){
			exit("Output format must be either pic or nrrd");
		}
	}
	// ... now deal with directories
	if(arg[0]=="" || arg[1]==""){
		exit();
	} else {
		outputDir=arg[1];
		if(!endsWith(outputDir,"/")) outputDir=outputDir+"/";

		if(File.isDirectory(arg[0])) {
// we're dealing with a directory
			dir=arg[0];
			if(!endsWith(dir,"/")) dir=dir+"/";
		} else {
// single file
			dir=File.getParent(arg[0])+"/";
			file=File.getName(arg[0]);
			processFile(dir,outputDir,file);
			exit();
		}
	}
}	

// 2) Ask for in/output dirs if required
// --------------------------------------

if(dir=="") dir = getDirectory("Choose a stacks directory");
if(outputDir=="") outputDir = getDirectory("Choose output directory");

// 3) Process files in the chosen directories
// --------------------------------------

setBatchMode(true);
count = 0;
countFiles(dir);
print("Total files: "+count);
n = 0;
processFiles(dir, outputDir);

// 4) Function definitions
// --------------------------------------

function countFiles(dir) {
	list = getFileList(dir);
	for (i=0; i<list.length; i++) {
		if (endsWith(list[i], "/"))
	            countFiles(""+dir+list[i]);
		else
			count++;
	}
}

function processFiles(dir,outputDir) {
	list = getFileList(dir);
	shuffle(list); // Shuffles list to stop different processes racing each other.
    for (i=0; i<list.length; i++) {
        if (endsWith(list[i], "/"))
            processFiles(""+dir+list[i], outputDir);
        else {
			showProgress(n++, count);
			processFile(dir,outputDir,list[i]);
        }
    }
}
function getLsmChannelWavelengths(dir,file) {
	// This is the path of the xml meta data file
	xmlpath=dir+substring(file,0,lengthOf(file)-4)+".xml";
	if(!File.exists(xmlpath)){
		if(AssumeChannelsInWavelengthOrder){
			print("Assuming channels in wavelength order since no XML metadata available at "+xmlpath);
			return newArray(0);
		}
		print("Skipping file: "+file+" since no XML metadata available at "+xmlpath);
		return;
	}
	// parse xml file to identify channel order
	xmlstr=File.openAsString(xmlpath);
	xmllines=split(xmlstr,"\n");

	// get the number of channels from the xml file
	noImages=0;
	for(l=0;l<xmllines.length;l++){
		if(indexOf(xmllines[l],"IMAGES_NUMBER_CHANNELS")>0){
			noImages=parseInt(substring(xmllines[l],indexOf(xmllines[l],"\">")+2,indexOf(xmllines[l],"</")));
		} 
	}
	if( noImages==0 )
		print("Image No not found in XML data for image: "+file);

	// make an array to handle up to 4 channels
	// this array has an index corresponding to channel order in the input file
	// (which is the same order that loci bio-formats will open the channels)
	// and a value which corresponds to the wavelength order of the channel
	lsmchannels=newArray(4);
	channelsfound=0;
	for(l=0;l<xmllines.length;l++){
		if(indexOf(xmllines[l],"DYE_NAME")>0){
			if(indexOf(xmllines[l],"488")>0 || indexOf(xmllines[l],"FITC")>0 || indexOf(xmllines[l],"GFP")>0){
				lsmchannels[channelsfound++]=488;
			}
			if(indexOf(xmllines[l],"568")>0 || indexOf(xmllines[l],"561")>0 || indexOf(xmllines[l],"543")>0){
				lsmchannels[channelsfound++]=568;
			}
			if(indexOf(xmllines[l],"647")>0 || indexOf(xmllines[l],"633")>0){
				lsmchannels[channelsfound++]=633;
			}
		}
	}
	// This should only come into play in a few files (LSM 510 only?)
	// where there is no DYE_NAME set
	if( (channelsfound) != noImages ){
		print("exploring ILL_NAME as a backup since no / inconsistent DYE_NAMES found");
		channelsfound=0;
		for(l=0;l<xmllines.length;l++){
			if(indexOf(xmllines[l],"ILL_NAME")>0){
				if(indexOf(xmllines[l],"488")>0){
					lsmchannels[channelsfound++]=488;
				}
				if(indexOf(xmllines[l],"568")>0 || indexOf(xmllines[l],"561")>0 || indexOf(xmllines[l],"543")>0){
					lsmchannels[channelsfound++]=568;
				}
				if(indexOf(xmllines[l],"647")>0 || indexOf(xmllines[l],"633")>0){
					lsmchannels[channelsfound++]=633;
				}
			}			
		}
	}

	if( (channelsfound) != noImages){
		print("Skipping "+lsmpath+"\nNumber of channels extracted from metadata ("+channelsfound+") not equal to channels from lsm ("+noImages+")");
		return -1;
	}

	
	// Get rid of any elements in the array where we didn't find a channel 
	//(e.g. last array element when 3 channels present)
	lsmchannels=Array.trim(lsmchannels,channelsfound);
	return lsmchannels;
}

function processFile(dir,outputDir,file) {
	print("dir = "+dir,"; outputDir = "+outputDir,"; file = "+file);
	if (endsWith(file, ".lsm") || endsWith(file,".LSM")) {
		c1picpath=outputDir+substring(file,0,lengthOf(file)-4)+"_01."+outputformat;
		if(File.exists(c1picpath)){
			print("Skipping file: "+file+" since 01."+outputformat+" already exists");
			return;			
		}

		lsmchannels=getLsmChannelWavelengths(dir,file);
		if (lsmchannels==-1) return;
		//by putting error checking to see if (channelsfound) != noImages in the previous 
		//function, if the script has gotten to this point we know that they are equal
		noImages=lsmchannels.length;
		
		if(AssumeChannelsInWavelengthOrder && lsmchannels.length==0 ){
			// FIXME - figure out how many channels there are in absence of xml metadata
			// Dummy wavelenths
			noImages=3;
			lsmchannels=newArray(100,200,300);
		}
		
		// If channels come in 568, 488, 633 these will be 1,0,2
		// If channels come in 633, 488, 488 these will be 2,0,1
		indicesOfChannelsInWavelengthOrder=Array.rankPositions(lsmchannels);

		// TODO: Looks like this is now the same as prev definition of channelsfound
		// but check this
		channelsfound=indicesOfChannelsInWavelengthOrder.length;
		
		// First identify wavelength of nc82 channel
		nc82wavelength=0;
		for(i=0;i<indicesOfChannelsInWavelengthOrder.length;i++){
			// Java is 0 indexed, the outside world is 1 indexed
			if(indicesOfChannelsInWavelengthOrder[i]+1==nc82channel){
				nc82wavelength = lsmchannels[i];
			} 
		}
		if(nc82wavelength == 0){
			exit("Unable to identify the nc82 channel");
		} 
		
		// Then set the output order, which is 1 for the nc82 channel
		// and then wavelength order (2,3 ... ) for everybody else
		outputChannelOrder = newArray(channelsfound);
		for(i=0;i<lsmchannels.length;i++){
			wavelength=lsmchannels[i];
			if(wavelength==nc82wavelength){
				outputChannelOrder[i]=1;
			} else if (wavelength<nc82wavelength){
				// add 1 just because the indices Array.rankPositions calculated by are 0 indexed 
				// AND another 1 to account for the nc82 channel that has been swapped in front
				// ie total of 2
				outputChannelOrder[i]=indicesOfChannelsInWavelengthOrder[i]+2;
			} else {
				// add 1 just because the indices Array.rankPositions calculated by are 0 indexed 
				outputChannelOrder[i]=indicesOfChannelsInWavelengthOrder[i]+1;
			}
		}

		lsmpath = dir+file;
		
		// Check that we have the same number of channels from the metadata file
		// and the lsm file. 
		
		// run("Bio-Formats Importer", "open=" + lsmpath + " view=[Standard ImageJ] stack_order=Default split_channels");
		print("Trying to open LSM with with `open()` rather than with LOCI");
		open(lsmpath);
		run("Split Channels");
//		title=getTitle();
//		noImages=parseInt(substring(title,(lengthOf(title)-1),lengthOf(title)));
		workingImage=getImageID();
//		noImages++;

		// this has to count down e.g. 2,1,0 if there are 3 images
		for(i=(noImages-1);i>=0;i--){
			channel=outputChannelOrder[i];
			selectImage(workingImage);
			processImage();
			if(outputformat=='pic'){
				run("Biorad ...","biorad=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"_0"+channel+".pic]");
			} else {
				setKeyDown("alt");
				run("Nrrd ... ", "nrrd=["+outputDir+substring(file,0,lastIndexOf(file,"."))+"_0"+channel+".nrrd]");
				setKeyDown("none");
			}
			print("Selecting Image " + workingImage);
			selectImage(workingImage);
			close();
			workingImage++;
		} 
	}
}

function processImage() {
//	run("Rotate 90 Degrees Right");
//	run("Flip Vertically", "stack");
//	run("Z Project...", "projection=[Standard Deviation]");
//	run("8-bit");
//	run("Flip Vertically");
}

function shuffle(array) {
   n = array.length;  // The number of items left to shuffle (loop invariant).
   while (n > 1) {
      k = randomInt(n);     // 0 <= k < n.
      n--;                  // n is now the last pertinent index;
      temp = array[n];  // swap array[n] with array[k] (does nothing if k==n).
      array[n] = array[k];
      array[k] = temp;
   }
}

// returns a random number, 0 <= k < n
function randomInt(n) {
   return n * random();
}
